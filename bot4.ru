import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # Render URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://tg-bot-xxx.onrender.com)
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∏–≤–µ—Ç üëã", callback_data="hello")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì", callback_data="help")],
        [InlineKeyboardButton(text="–ï—Å—Ç—å –ª–∏ –∂–∏–∑–Ω—å –Ω–∞ –ú–∞—Ä—Å–µ? üöÄ", callback_data="mars")],
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ ü§ñ", callback_data="about")]
    ])
    return keyboard


# --- –í–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é "–û –±–æ—Ç–µ" ---
def about_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç–µ–ª—å üë®‚Äçüíª", callback_data="creator")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_to_main")]
    ])
    return keyboard


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query()
async def handle_menu(callback: types.CallbackQuery):
    if callback.data == "hello":
        await callback.message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç üöÄ")
    elif callback.data == "help":
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
    elif callback.data == "mars":
        await callback.message.answer("–ò —Ç–∞–º –µ—ë –Ω–µ—Ç... üåå")
    elif callback.data == "about":
        await callback.message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é '–û –±–æ—Ç–µ':", reply_markup=about_menu())
    elif callback.data == "creator":
        await callback.message.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å: compact üöÄ")
    elif callback.data == "back_to_main":
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏


# --- Webhook ---
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(app):
    await bot.delete_webhook()


async def handle(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()


def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))


if __name__ == "__main__":
    main()
