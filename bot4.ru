import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ===== –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (ReplyKeyboard) =====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–∏–≤–µ—Ç üëã"), KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")],
        [KeyboardButton(text="–ï—Å—Ç—å –ª–∏ –∂–∏–∑–Ω—å –Ω–∞ –ú–∞—Ä—Å–µ?")],
        [KeyboardButton(text="–ú–µ–Ω—é üìã")]
    ],
    resize_keyboard=True
)

# ===== Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def get_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∏–≤–µ—Ç üëã", callback_data="hello")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì", callback_data="help")],
        [InlineKeyboardButton(text="–ï—Å—Ç—å –ª–∏ –∂–∏–∑–Ω—å –Ω–∞ –ú–∞—Ä—Å–µ?", callback_data="mars")],
        [InlineKeyboardButton(text="–ú–µ–Ω—é üìã", callback_data="menu")]
    ])

def get_submenu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ ü§ñ", callback_data="about")],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç–µ–ª—å üßë‚Äçüíª", callback_data="author")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="back")]
    ])

# ===== –ö–æ–º–∞–Ω–¥—ã =====
@dp.message(F.text.lower().in_({"start", "—Å—Ç–∞—Ä—Ç", "/start"}))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç.\n"
        "–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏–ª–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá",
        reply_markup=main_kb
    )
    await message.answer("–ê –≤–æ—Ç inline-–∫–Ω–æ–ø–∫–∏:", reply_markup=get_inline_keyboard())

@dp.message(F.text.lower().in_({"help", "–ø–æ–º–æ—â—å", "/help"}))
async def send_help(message: types.Message):
    await message.reply("–Ø –º–æ–≥—É:\n‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å\n‚Äî –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Äî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é\n‚Äî –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Reply-–∫–Ω–æ–ø–æ–∫ =====
@dp.message(F.text.lower() == "–ø—Ä–∏–≤–µ—Ç üëã")
async def reply_hello(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üëã")

@dp.message(F.text.lower() == "–ø–æ–º–æ—â—å ‚ùì")
async def reply_help(message: types.Message):
    await message.reply("–ü–æ–º–æ—â—å: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ.")

@dp.message(F.text.lower() == "–µ—Å—Ç—å –ª–∏ –∂–∏–∑–Ω—å –Ω–∞ –º–∞—Ä—Å–µ?")
async def mars_answer(message: types.Message):
    await message.reply("–ò —Ç–∞–º –µ—ë –Ω–µ—Ç...")

@dp.message(F.text.lower() == "–º–µ–Ω—é üìã")
async def reply_menu(message: types.Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é üìã", reply_markup=get_submenu())

# ===== Inline-–∫–Ω–æ–ø–∫–∏ =====
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    if callback.data == "hello":
        await callback.message.answer("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üëã")
    elif callback.data == "help":
        await callback.message.answer("–ü–æ–º–æ—â—å: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ.")
    elif callback.data == "mars":
        await callback.message.answer("–ò —Ç–∞–º –µ—ë –Ω–µ—Ç...")
    elif callback.data == "menu":
        await callback.message.edit_text("üìã –ú–µ–Ω—é:", reply_markup=get_submenu())
    elif callback.data == "about":
        await callback.message.answer("–Ø —Ç–µ—Å—Ç–æ–≤—ã–π Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ Python üêç —Å –ø–æ–º–æ—â—å—é aiogram.")
    elif callback.data == "author":
        await callback.message.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å: StavrMedia üöÄ")
    elif callback.data == "back":
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_inline_keyboard())

    await callback.answer()

# ===== –≠—Ö–æ =====
@dp.message()
async def echo(message: types.Message):
    await message.answer(message.text)

# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
